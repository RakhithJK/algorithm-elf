<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book SYSTEM "/usr/share/sgml/docbook/xml-dtd-4.1.2/docbookx.dtd">
<book lang="zh-cn">
<title>数据结构算法精灵</title>
<bookinfo> 
   <author>
      <firstname>俊德</firstname>
      <surname>赵</surname>
   </author>
   <revhistory>
        <revision>
            <revnumber>0.4</revnumber>
            <date>2010-09-18</date>
            <authorinitials>Jondy Zhao - jondy.zhao@gmail.com</authorinitials>
            <revremark>
             重构了全部代码。
            </revremark>
         </revision>

        <revision>
            <revnumber>0.3</revnumber>
            <date>2010-3-20</date>
            <authorinitials>Jondy Zhao - jondy.zhao@gmail.com</authorinitials>
            <revremark>
             增加了图形化参数和自动解析类 Pascal 语言的功能。
            </revremark>
         </revision>

        <revision>
            <revnumber>0.2</revnumber>
            <date>2009-8-30</date>
            <authorinitials>Jondy Zhao - jondy.zhao@gmail.com</authorinitials>
            <revremark>
               修改了字符串和图的字符串参数说明部分。
            </revremark>
         </revision>

         <revision>
            <revnumber>0.1</revnumber>
            <date>2009-7-7</date>
            <authorinitials>Jondy Zhao - jondy.zhao@gmail.com</authorinitials>
            <revremark>
               第一版草稿，尚未彻底完成。
            </revremark>
         </revision>
      </revhistory>
</bookinfo>

<!--
* 目录

 > 概述

 > 安装和卸载

 > 使用入门

 > 功能说明   
   >> 算法主窗口
   >> 算法参数设定
   >> 算法演示窗口

 > 算法语言
  >> 基本语法
  >> 扩充语法
  >> 库函数


 > 附录
   >> 注册算法精灵
   >> 算法参数属性
-->

<chapter>
<title>概述</title>

<para>
德新数据结构辅助教学软件是一个直观显示数据结构各种算法执行过
程中代码、堆栈和数据变化过程的辅助工具。该工具使用直观的方式
显示了常用数据结构算法（递归，链表，树，图，排序，查找等）的
实现过程，用户可以设置算法的初始参数，然后交互式的查看算法的
执行过程中堆栈、代码和数据的变化，其中数据的变化通过图像化的
方式，譬如树，图或者链表的方式直观的显示出来，代码和堆栈也是
通过图像显示出入栈，函数的调用，代码的执行等过程细节，这样便
于用户理解这些细节。用户还可以把执行过程的每一个操作步骤以文
字的形式保存起来，还可以使用动画的方式查看整个执行的过程，可
以回放历史执行过程。
</para>

<para>
本软件的适用对象：
</para>

<para>
一是数据结构培训老师，可以用于设计课件。与使用传统工具制作课
件的方法相比，本工具可以提供动态的参数。譬如快速排序，传统课
件只能对一组固定的数据制作课件，而本工具可以任意设定初始的关
键字，然后自动生成快速的操作过程，我们可以选用其中的部分作为
课件的内容。
</para>

<para>
二是学习数据结构，具备一定基础的学生，可以帮助其理解算法执行
过程的每一个细节和步骤，堆栈的变化，数据的变化等，从而更快和
更深入的对算法进行理解。
</para>

</chapter>

<chapter>
<title>安装和卸载</title>

<para>算法精灵目前可以运行于32位Windows平台和Linux兼容的平台，
不同的平台使用不同的安装包。</para>

<sect1>
<title>Windows 平台</title>

<para>在 Windows 平台下的安装包是一个可执行文件:
  algorithm-elf-X.Y.M.N.exe 其中 X.Y.M.N 是版本号。</para>
<para>
直接双击安装包，按照提示完成安装。
</para>

<para>
安装完成会有桌面图标和开始菜单程序组：算法精灵。双击桌面图标
算法精灵即可启动。
</para>

<para>
卸载有两种方式，一是直接双击安装包，如果已经安装过算法精灵，
那么会提示修复还是卸载，选择卸载，按照提示完成即可卸载。
</para>
<para>
或者在开始菜单中，找到算法精灵程序组，点击里面的卸载也可以卸
载算法精灵。
</para>
</sect1>

<sect1>
<title>Linux 平台</title>

<para>
Linux 平台下使用 RPM 格式的安装包：algorithm-elf-X.Y.M.N-1.linux.i686.rpm
</para>

<para>
使用下面的命令安装算法精灵：
<programlisting>
$ rpm -ivh algorithm-elf-1.1.0.32-1.linux.i686.rpm
</programlisting>
</para>
<para>
如果权限不够的话，请切换到超级用户执行安装。
</para>
<para>
安装默认目录为 /usr/algorithm-elf
</para>
<para>
安装完成之后在终端执行下列命令启动算法精灵
<programlisting>
$ cd /usr/algorithm-elf
$ ./algorithm-elf.bin
</programlisting>
</para>

<para>
RPM 卸载执行下面的命令
<programlisting>
$ rpm -e algorithm-elf
</programlisting>
</para>

</sect1>

</chapter>

<chapter>
<title>使用教程</title>

<para>下面是简单的使用过程说明</para>

<sect1>
<title>启动</title>

<orderedlist>
<listitem>
<para>在 Windows 平台下可以双击桌面图标<productname>算法精灵</productname>启动主程序</para>
<para>在 Linux 平台下输入命令
<programlisting>
  $ cd /usr/algorithm-elf   # 切换到安装目录
  $ ./algorithm-elf.bin
</programlisting>启动算法精灵。
</para>
</listitem>
</orderedlist>
</sect1>

<sect1>
<title>新增算法文件</title>
<orderedlist>
  <listitem>
    <para>
    点击新建按钮，在编辑区输入算法文件。算法文件使用 pascal
    语言，请参考下面的算法文件部分了解详细的语言细节。
    </para>
</listitem>
  <listitem>
    <para>
    点击保存按钮，弹出文件保存对话框，输入算法文件名称，点击确定。
    <tip><para>算法文件名称不支持汉字，也不允许包括空格。</para></tip>
    </para>
  </listitem>
</orderedlist>
</sect1>

<sect1>
<title>编译算法文件</title>
<orderedlist>
  <listitem><para>点击编译按钮，弹出编译窗口。</para></listitem>
  <listitem><para>如果编译窗口没有显示错误信息，那么编译通过。</para></listitem>
  <listitem><para>如果编译窗口显示“Line n: Synax error”，
  那么双击该行，返回到主窗口，并且输入光标定位在出现错误的行。
  </para></listitem>
  <listitem><para>修改算法文件，直至编译通过。</para></listitem>
</orderedlist>
</sect1>

<sect1>
<title>设置算法参数</title>
<orderedlist>
<listitem><para>
点击设置按钮，进入算法初始参数设置页面。
<tip><para>算法文件编译之后，算法主函数的入口参数会自动的添加到参数列表
里面。这里能够看到初始化的参数名称列表。
</para></tip>
</para></listitem>
<listitem><para>
算法参数设置页面左边是参数列表，右边是图形化的参数，还有一个
浮动窗口，显示的是参数的属性。
</para></listitem>

<listitem><para>
点击按钮增加，弹出增加变量对话框，选择变量的类型、输入变量的
名称和初始值，点击确定，增加一个新参数。
</para></listitem>

<listitem><para>
点击按钮增加，弹出增加变量对话框，选择变量的类型、输入变量的
名称和初始值，点击确定，增加一个新参数。
</para></listitem>

<listitem><para>
点击按钮删除，删除选中的变量。
<tip><para>算法主函数的入口参数对应的变量不运行删除</para></tip>
</para></listitem>

<listitem><para>
修改参数的内容直接点击对应的参数，即可选中该参数。这时候右边会显示参数的可见图片，属性窗口显示变量对应的属性值。
</para>
<para>
对于简单类型的变量，直接修改文本框的内容来设定变量的值。
</para>
<para>
如果当前变量类型是树，那么在右边窗口顶部会显示三个按钮：增加左孩子，删除孩子，增加右孩子。可以用来增加树的孩子结点。
</para>
<para>
如果当前类型是记录，那么在右边窗口顶部会显示两个按钮：增加孩子，删除孩子。可以用例增加结构体的孩子元素。
</para>
<para>
如果当前类型是数组，和记录类似。同时还可以使用属性窗口中的属性：数组大小来设定数组的大小。直接在属性窗口中数组大小中输入数值，然后回车，会自动设定数组的大小。
</para>
<para>
如果当前类型是指针，那么会列出其他可以引用的变量，选择一个即可。列表中有一个特殊的变量：None，表示为空指针。这也是默认值。
</para>
<para>对于树、记录和数组，其孩子的值的输入可以直接点击孩子对应的可见对象，这时候会在孩子的中间出现输入框，直接输入孩子对应的值即可。
<tip><simpara>
如果输入的值为 None，那么孩子将是会被隐藏起来不显示。
</simpara></tip>
<tip><simpara>
指针类型的参数无法使用鼠标点击选择，但是可以使用TAB 键切换焦点到其上。
</simpara></tip>
</para></listitem>

<listitem><para>参数修改完成之后，点击应用按钮，将当前修改存盘，返回到主窗口。</para></listitem>
</orderedlist>
</sect1>

<sect1 id="ch_play">
<title>算法演示</title>
<para>
在主窗口点击演示，进入算法演示主窗口。如果算法初始化正确，那
么算法演示窗口的按钮 启动 和 单步 已经可用，这时候就可以算法
演示。
</para>
<para>如果算法初始化不正确，一般情况可能是参数设置，这时候可
  以点击按钮设置，重新设定参数。</para>
<orderedlist>
<listitem><para>
点击启动按钮，算法开始连续执行。
</para>
<para>
或者点击 单步执行，进行单步操作。每点击一次，执行一条代码语句。
</para>
<para>
在连续执行模式，可以点击控制按钮 延时 的增加和减小的小按钮，来设定算法执行每一条语句之后的延时值，延时的单位是 毫秒，也可以直接输入延时值。
</para>
<para>
在连续执行模式，如果需要进行单步模式，点击暂停按钮之后，单步执行按钮就可以使用。
</para>
<para>
在单步模式，点击 恢复 按钮，就可以进行连续执行模式。
</para></listitem>
<listitem><para>
点击暂停，算法暂时停止执行，这时候可以查看内存变量的值、堆栈的状态等。
</para></listitem>
<listitem><para>
点击 终止按钮，算法演示过程将终止。
</para></listitem>
<listitem><para> 
如果不进行任何交互，算法将正常完成演示。这时候重置按钮可用，其他按钮都不可用。
</para></listitem>
<listitem><para> 
点击 重置 按钮，算法将重新回到等待运行状态。
</para></listitem>
</orderedlist>
<sect2><title>算法演示的内容说明</title>
<para>
算法演示的内容包括：代码视图、图片视图，堆栈视图和内存视图，
输出窗口。
</para>
<para>
其中代码视图和图片视图在算法演示窗口的左右两侧，不可以关闭和
隐藏。而堆栈、内存视图和输出窗口，则可以被关闭和隐藏。点击工
具栏右方按钮视图，弹出菜单，可以用来隐藏和显示堆栈、内存视图
和输出窗口。
</para>
<para>
代码视图显示当前执行的代码，代码视图始终高亮显示当然执行的代
码行，在暂停模式，把鼠标移动到该代码上，可以显示局部变量的值
等。
</para>
<para>
图片显示显示的数据和变量的图片形式，可以直观的观察算法执行过
程中数据的变化情况。
</para>
<para>
内存视图显示的是内存中全局变量、局部变量和函数返回地址。使用
“参数名称 : 参数值” 的格式显示全局变量和局部变量。
</para>
<para>
在算法的执行过程中，当前变化的局部变量会高亮显示，表示这个参
数的值发生了变化。
</para>
<para>堆栈视图显示的代码形式的算法执行序列，以及函数的调用序
  列。</para>
<para>你可以将鼠标指针移动到堆栈视图的某一行上，会弹出气球显
  示当前行对应的变量在执行过程中值。</para>
<para>
在整个算法的演示过程中，有一个 时间指针 始终指向当前活动的焦
点，譬如执行的代码行的变化，堆栈参数的变化，可见视图的变化等。
</para>
</sect2>
</sect1>
</chapter>

<chapter><title>算法文件</title>
  <para>可以使用类 Pascal 语言来增加新的算法。</para>
  <para>可以使用算法语言来描述算法，语句格式和语法和 Pascal
  类似，扩充了部分数据类型。</para>  

  <sect1><title>文件结构</title>
  <para>每一个算法文件由两个文件组成，扩展名默认为 .paf
  和.cfg。paf 是算法主文件，文件中包括若干个函数或者过程，其
  中第一个是主函数。cfg 是 xml 格式的参数设置文件，设定了算
  法的入口参数。</para>
  <para>主函数中不能有变参，主函数的入口参数值在配置文件中设
  定。</para>
  </sect1>

  <sect1><title>算法语言</title>
   <para>算法语言基本和 Pascal 类似，但是目前版本不支持 with
   语句，不支持 子范围类型（Subrange），并且库函数也只实现了
   部分，详细请参考后面的库函数列表。</para>
    <sect2><title>简单数据类型</title>
      <para>Integer,Real,Char,Boolean,String 
      <programlisting>
var
  r: Real;
  i: Integer;
  c: Char;
  b: Boolean;
  t: SomeType;
  e: (apple, pear, banana, orange, lemon);	
      </programlisting>
      </para>
    </sect2>
    <sect2><title>复合数据类型</title>
      <para>Set,Enum,Record,Array
	<programlisting>
  var
  set1: set of Integer;
  arr1: array of Integer;
  arr2: array [0..10] of String;
  r1: record of
       name: String;
       age: integer;
     end;

	</programlisting>
      </para>
    </sect2>
    <sect2><title>数据类型定义</title>
      <para>Set,Enum,Record,Pointer
      <programlisting>
type
  x = Integer;
  y = x;
  ...

type 
  a = Array [1..10] of Integer;
  b = record
        x: Integer;
        y: Char
      end;

type 
  a = ^b;
  b = record
        x: Integer;
        y: Char;
        z: a
      end;
var
  pointertob: a;
  pInt : ^Integer;

new(pointertob);

pointertob^.x := 10;
pointertob^.y := 'A';
pointertob^.z := nil;


procedure main
    var x:^Integer; /* Allocate the pointers x and y */
    var y:^Integer; /* (but not the pointees)        */
begin
    new(x); /* Allocate a pointee and set x to point to it */
    
    x^ := 42;   /* Deference x to store 42 in its pointee */
    
    y^ := 13;   /* CRASH -- y does not have a pointee yet */
    
    y := x; 	/* Pointer assignment makes y point to x's pointee */
    
    y^ := 13;   /* Dereference y to store 13 in its (shared) pointee */
end;

      </programlisting></para>
    </sect2>
    <sect2><title>控制语句</title>
      <para>if, while, repeat, case, for
	<programlisting>
while a &lt;&gt; b do writeln('Waiting');
 
if a &gt; b then writeln('Condition met')
else writeln('Condition not met');
 
for i := 1 to 10 do writeln('Iteration: ', i:1);
 
repeat
  a := a + 1
until a = 10;
 
case i of
  0: write('zero');
  1: write('one');
  2: write('two');
end;

</programlisting>
      </para>
    </sect2>
    <sect2><title>表达式</title>
<programlisting>
      数值表达式： +, -, *, / 

         1 + a, 2 * 4, 3.5 / 6

      布尔表达式: and, or, not, &lt;, &gt;, &lt;=, &gt;=, &lt;&gt;
      
         a and b 
         a = b
      
      字符串表达式: + 
         'abc' + 'efg'

      集合运算: in 
         
          a in [1,2,3]  

      指针运算: ^ 
          
          p^ := s;

      访问记录体: .

          s.name := 'jondy';

      赋值语句：:=

          s := 2;

</programlisting>
    </sect2>
    <sect2><title>函数和过程</title>
      <para>不支持在函数定义中再次定义其他函数，可以提前使用
      尚未定义的函数。
      <programlisting>
  function next(k: integer): integer;
  begin
    next := k + 1
  end;

  procedure print(var j: integer); 
  begin
    writeln('The total is: ', j);
    j := next(j)
  end;
</programlisting>
      </para>
    </sect2>
  </sect1>

  <sect1><title>扩充语句</title>
    <sect2><title>扩充数据类型：树</title>
      <para>
      <programlisting>
var
    x: Tree;
    p: ^Tree;

x.title := 'a';
x.value := 3;

new(p);
new(p1);
new(p2);
p.title := 'root';
p1.title := 'lchild';
p2.title := 'rchild';
p.lchild := p1;
p.rchild := p2;

{{a+, a-, a->b}}

	
      </programlisting>
      </para>
    </sect2>
    <sect2><title>扩充数据类型：队列</title>
          <para>
      <programlisting>
var
    x: Queue;
    p: ^Queue;
begin
  x[1] := 15;	
      </programlisting>
      </para>
    </sect2>
    <sect2><title>扩充语句</title>
          <para>为了控制变量的显示，增加了下列的扩充语句，扩
          充语句使用两个大括号包围起来，作为一种特殊格式的
          Pascal 注释，可以不和 Pascal 发生冲突，保证原来的
          算法可以被 Pascal 编译器处理。
      <programlisting>
      可用格式如下：
      {{+a,-a,*a,a-&gt;b,a=b,[a],(a),&lt;a&gt;,a,a->&gt;None}}

      *a: 激活变量 a 对应的可见对象，一般就是背景色被高亮显
      示；

      &lt;a&gt;: 将激活变量设定为未激活，也就是恢复原来的背
      景色。

      a -&gt; b: b 是 a 的关联对象，一般情况下 a 是一个整数，
      而 b 是一个数组，经过这样设定之后，a 会显示一个指针，
      指向数组 b 对应的元素。
      譬如  a := 1, a 就会显示一个可见指针，指向数组元素
      b[1]，如果 a 的值发生变化，就会自动指向对应的下标。

      特别的，如果 b 为 None，也就是说 {{a-&gt;None}}，那么
      取消 a 和原来关联变量的关系。

      +a: 使得变量 a 成为一个可见对象；

      -a: 删除变量 a 对应的可见对象；

      [a]: 选中变量 a 对应的可见对象，一般是设置焦点到 a 对
      应的可见对象，会出现一个方框。

      (a): 隐藏变量 a 对应的可见对象，这里只是不显示 a 的文
      本信息，可见对象还是存在，只是不显示。

      a: 单独一个变量名称，与 (a) 正好相反，显示 a 的文本内
      容。

      a = b: 拷贝可见对象 b 的内容到 a；

      以上各种格式的扩充语句可以单独使用，也可以组合使用；可
      以放置在算法的任何地方，但是一定要在对应的变量声明之后。

      譬如：

      {{+a}}

      {{-a}}

      {{a->r, b->r}}

      </programlisting>
      </para>
    </sect2>
    <sect2><title>入口参数访问</title>
          <para>一般情况下，在参数设定窗口设置的参数不需要在
          算法中使用，自动的带入到算法入口函数中。特殊情况下
          需要访问这些参数的，可以使用下面的格式：
      <programlisting>
      Vars.name      
      </programlisting>
      </para>
    </sect2>
  </sect1>

  <sect1><title>可用函数库</title>
    <para>这里实现了常用了的 Pascal 的库函数</para>
    <sect2><title>abs</title>
      <para><programlisting>function Abs(X);</programlisting></para>
    </sect2>
    <sect2><title>addr</title>
      <para><programlisting>function Addr(X): Pointer;</programlisting></para>
    </sect2>
    <sect2><title>chr</title>
      <para><programlisting>function Chr(X: Byte): Char;</programlisting></para>
    </sect2>
    <sect2><title>copy</title>
      <para><programlisting>function Copy(S; Index, Count: Integer): string;
</programlisting></para>
    </sect2>
    <sect2><title>cos</title>
      <para><programlisting>function Cos(X: Extended): Extended;</programlisting></para>
    </sect2>
    <sect2><title>delete</title>
      <para><programlisting>procedure Delete(var S: string; Index, Count:Integer);</programlisting></para>
    </sect2>
    <sect2><title>dispose</title>
      <para><programlisting>procedure Dispose(var P: Pointer);</programlisting></para>
    </sect2>
    <sect2><title>exp</title>
      <para><programlisting>function Exp(X: Real): Real;</programlisting></para>
    </sect2>
    <sect2><title>frac</title>
      <para><programlisting>function Frac(X: Extended): Extended;</programlisting></para>
    </sect2>
    <sect2><title>high</title>
      <para><programlisting>function High(X);</programlisting></para>
    </sect2>
    <sect2><title>insert</title>
      <para><programlisting>procedure Insert(Source: string; var S: string; Index: Integer);

</programlisting></para>
    </sect2>
    <sect2><title>int</title>
      <para><programlisting>function Int_(X: Extended): Extended;</programlisting></para>
    </sect2>
    <sect2><title>length</title>
      <para><programlisting>function Length(S): Integer;</programlisting></para>
    </sect2>
    <sect2><title>ln</title>
      <para><programlisting>function Ln(X: Real): Real;</programlisting></para>
    </sect2>
    <sect2><title>low</title>
      <para><programlisting>function Low(X);</programlisting></para>
    </sect2>
    <sect2><title>move</title>
      <para><programlisting>procedure Move(const Source; var Dest; Count: Integer);</programlisting></para>
    </sect2>
    <sect2><title>new</title>
      <para><programlisting>procedure New(var P: Pointer);</programlisting></para>
    </sect2>
    <sect2><title>odd</title>
      <para><programlisting>function Odd(X: Longint): Boolean;</programlisting></para>
    </sect2>
    <sect2><title>ord</title>
      <para><programlisting>function Ord(X);</programlisting></para>
    </sect2>
    <sect2><title>ptr</title>
      <para><programlisting>function Ptr(Address: Integer): Pointer;</programlisting></para>
    </sect2>
    <sect2><title>pos</title>
      <para><programlisting>function Pos(Substr: string; S: string): Integer;</programlisting></para>
    </sect2>
    <sect2><title>round</title>
      <para><programlisting>function Round(X: Extended): Int64;</programlisting></para>
    </sect2>
    <sect2><title>setlength</title>
      <para><programlisting>procedure SetLength(var S; NewLength: Integer);</programlisting></para>
    </sect2>
    <sect2><title>sin</title>
      <para><programlisting>function Sin(X: Extended): Extended;</programlisting></para>
    </sect2>
    <sect2><title>sqr</title>
      <para><programlisting>function Sqr(X: Extended): Extended;</programlisting></para>
    </sect2>
    <sect2><title>sqrt</title>
      <para><programlisting>function Sqrt(X: Extended): Extended;</programlisting></para>
    </sect2>
    <sect2><title>trunc</title>
      <para><programlisting>function Trunc(X: Extended): Int64;</programlisting></para>
    </sect2>
    <sect2><title>write</title>
      <para><programlisting>procedure Write([ var F: Text; ] P1 [, P2, ...,Pn ] );</programlisting></para>
    </sect2>
    <sect2><title>writeln</title>
      <para><programlisting>procedure WriteLn([ var F: Text; ] P1 [, P2, ...,Pn ] );</programlisting></para>
    </sect2>
  </sect1>  

</chapter>

<chapter>
<title>附录</title>

<sect1><title>注册算法精灵</title>
<para>如果你认为本产品能够对你有帮助，如果想继续使用，请按照
下面的步骤注册使用。
</para>
<sect2>
<title>获得注册码</title>
<para>
注册码就是一串字符。你必须能够连接上因特网，然后使用下列方式之一可以获得：
</para>
<para><itemizedlist>
<listitem><para>打开浏览器，将产品注册地址输入地址栏
<ulink url="http://www.shareit.com/product.html?productid=300326756">http://www.shareit.com/product.html?productid=300326756</ulink>或者
<ulink url="http://shareware.skycn.com/soft/26526.htm">http://shareware.skycn.com/soft/26526.htm</ulink>
然后回车。按照页面提示购买 License Key。
</para>
</listitem>
<listitem><para> 启动 算法精灵，点击菜单 帮助->在线注册。
</para>
  <para>系统会打开浏览器，跳转到注册页面，请按照提示购买注册吗</para>
</listitem>
</itemizedlist>
注册码会通过邮件方式发给注册用户，请妥善保管此邮件，这是以后的升级依据。
</para>
</sect2>

<sect2>
<title>生成认证文件</title>
<para>获得注册码之后，启动 算法精灵，点击 帮助->生成认证文件，出现注册窗口</para>
<orderedlist>
<listitem><para>将邮件中注册码拷贝到编辑框中。
</para></listitem>
<listitem><para>点击【注册】，生成认证文件。
</para></listitem>
<listitem><para>重新启动应用程序，就完成产品注册。
</para></listitem>
</orderedlist>
</sect2>
</sect1>

<sect1 id="ch_paraformat"><title>算法参数属性列表</title>
<para>参数的属性列表，说明各个参数属性的含义和作用。</para>
<sect2><title>可见性</title>
<para>参数是否是一个可见变量。选择 True，那么变量会作为一个
  可见参数显示在视图上面；选择 False，变量不会显示出来。</para>
</sect2>
<sect2><title>宽度</title>
<para>对于简单变量来说，就是可见对象的显示宽度。对于结构体来
  说，如果布局方向是水平的，那么这个宽度就是孩子结点的默认宽
  度；如果布局方向是垂直的，那么这个宽度才是结构体的显示宽度。  
</para>
<para>如果设置为 0，表示自动选择合适宽度。</para>
</sect2>
<sect2><title>高度</title>
<para>对于简单变量来说，就是可见对象的显示高度。对于结构体来
  说，如果布局方向是垂直的，那么这个高度就是孩子结点的默认高
  度；如果布局方向是水平的，那么这个高度才是结构体的显示高度。  
</para>
<para>如果设置为 0，表示自动选择合适高度。</para>
</sect2>
<sect2><title>形状</title>
<para>对于简单变量来说，就是结点的形状；对于结构体来说，就是
  孩子的默认形状。</para>
<para>可用值：oval，rectangle。前者是圆形，后者是方形。</para>
</sect2>
<sect2><title>关联变量</title>
<para>当前变量的关联变量，关联变量一定是数组类型。</para>
<para>可以选择一个已经定义的数组变量作为当前变量的关联变量。
  所谓关联变量就是会根据变量的值作为数组的下标指向关联变量，
  当前变量的值发生变化之后，指针自动移动到对应的数组元素。</para>
</sect2>
<sect2><title>布局方向</title>
<para>仅仅适用于结构体，说明孩子的方向。</para>
<para>可用值：horizontal, vertical。分别表示水平和垂直走向。</para>
</sect2>
<sect2><title>水平填充</title>
<para>仅仅适用于结构体，当结构体孩子显示在结构体内部时候水平
  填充像素数</para>
</sect2>
<sect2><title>垂直填充</title>
<para>仅仅适用于结构体，当结构体孩子显示在结构体内部时候垂直
  填充像素数</para>
</sect2>
<sect2><title>水平增量</title>
<para>仅仅适用于结构体，说明孩子的宽度增量。</para>
<para>默认是0，如果不为0，那么结构体孩子的显示宽度从左向右依
  次增加或者减少水平增量个像素。水平增量可正可负。</para>
</sect2>
<sect2><title>垂直增量</title>
<para>仅仅适用于结构体，说明孩子的高度增量。</para>
<para>默认是0，如果不为0，那么结构体孩子的显示高度从上向下依
  次增加或者减少垂直增量个像素。垂直增量可正可负。</para>
</sect2>
<sect2><title>锚点</title>
<para>仅仅适用于结构体，用于定位孩子的位置。</para>
<para>可用值："n", "ne", "e", "se", "s", "sw", "w", "nw",
  "center"</para>
<para>n, s, w, e 分别代表上北，下南，左西，右东。 "nw" 组合表
  示左上角，其他组合依次类推表示各个角。"n" 表示上方中间，单
  独的都表示对应方向的中间。特殊的是 "center" 表示中间。</para>
</sect2>
<sect2><title>数组大小</title>
<para>仅仅使用数组，设定数组的大小。</para>
</sect2>
<sect2><title>匿名</title>
<para>仅仅适用于结构体，说明是否显示孩子的标题。</para>
<para>设置为 False，则不显示孩子的标题，如果数组的话下标就不
  在显示；结构体的化子元素名称也不显示</para>
<para>设置为 True，则显示孩子的标题</para>
</sect2>
</sect1>

<sect1>
<title>设定语言</title>
<para>一般情况下，安装过程中选择的语言就是算法精灵的界面语言，
目前支持的有中文和英文两种。如果想更改界面语言，按照下列步骤
操作：</para>
<orderedlist>
<listitem><para>
在安装目录下找到文件：algorithm-elf.cfg
</para></listitem>
<listitem><para>
使用任何文本编辑工具例如记事本等打开该文件
</para></listitem>
<listitem><para> 在文件中查找包括 "Language = " 的行，将后面
的值修改为： en 或者 zh, en 表示英文界面，zh 表示中文界面。如
果没有找到，那么在 "[DEFAULT]"下面增加一行 "Language = zh" 或
者 "Language = en"，注意区分大小写。
</para></listitem>
<listitem><para>
保存关闭文件，重新启动算法精灵即可。
</para></listitem>
</orderedlist>
</sect1>

</chapter>

</book>
