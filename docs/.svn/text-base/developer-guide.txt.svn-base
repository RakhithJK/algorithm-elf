
数据结构算法助手 产品手册

* 产品信息

  内部编号：DSAD
  AppId = DSAD

  产品名称: 数据结构算法助手
  AppName = Data Structure Algorithm Assistant

  产品简称: 算法精灵
  AppNickName = Algorithm Elf


  版本：1.0.0.1
  AppVersion = 1.0.0.1

  版权: 版权所有 (c) 2009，2010 德新软件公司。保留全部权利。
  AppCopyright = Copyright (c) 2009,2010 Dashingsoft Corp. All rights reserved.

  软件制造商：德新软件
  AppPublisher = Dashingsoft Corp.

  其他信息：
  AppContact=jondy.zhao@gmail.com
  AppPublisherURL=http://www.dashingsoft.com
  AppReadmeFile=Readme.txt
  AppSupportPhone=86-29-8833-0275
  AppSupportURL=http://www.dashingsoft.com
  
  注册地址：
      英文版本 shareit 提供的地址
      http://www.shareit.com/product.html?productid=300326756
      
      中文版本 华军软件商场提供的地址
      http://www.31buy.com/order/form_set_order_v2.aspx?cardID=16389

      天空软件的浏览地址：
      http://shareware.skycn.com/soft/26526.htm

      中国软件共享中心
      http://www.softreg.com.cn/shareware.asp?id=43059

      
  AppUpdatesURL=http://www.dashingsoft.com
  AppComments =
  产品简介：

      一个使用图形化的方式动态显示数据结构算法执行过程的模拟
      软件。适用于制作数据结构算法课程的课件或者直观了解算法
      执行过程。


  主要功能：

        > 算法动画演示，以及算法执行过程中的源代码的执行和堆
          栈的变化视图。

        > 算法执行可以单步，也可以连续。在连续执行过程中随时
          可以切换到单步模式。

        > 可以配置算法的初始参数，譬如树，图等，算法精灵可以
          自动识别。

        > 算法执行完成之后，可以回放算法执行的动画过程。

        > 已经实现的算法：
              * 汉诺塔递归算法
              * 二叉树遍历
              * 建立线索二叉树
              * 普利姆算法
              * 直接插入排序
              * 快速排序
              * 归并排序

        > 熟悉 Python 的用户 ，可以增加自己的算法演示程序。

        > 支持多平台和国际化，目前只有中文和英文。

  产品未来：

        > 树，图的输入参数可以使用图形化。

        > 算法执行过程可以任意回退。

        > 动画过程可以保存为文件。

        > 可以定制可视视图的形状和风格。

        > 调试算法，用户可以输入自己编写的算法，算法精灵会显
          示算法执行过程的数据变化，用直观的方式显示出算法中
          的问题。


  版权形式：
      注册使用版。

  跟踪反馈：

      问题报告和增强功能，访问mantis中对应的项目，或者直接发
      邮件，在线反馈。

      查看常见问题，产品常见问题链接或者脱机文档。

* 产品版本计划

说明产品大小版本的功能列表，产品版本计划根据用户反馈不断更新。
根据用户的需要可以增加和删除功能，设定计划发布的时间。产品版
本计划每一个月跟踪一次，在每一个月的第一个工作日发布本月的产
品版本发布计划，同时总结上一个月的发布情况。

使用文件 TrackVersion.xls 来跟踪产品版本计划。

* License 管理。

1. 生成 RSA 的公钥和密钥。
   这个一般只生成一次，生成之后将密钥保存好即可。目前使用
   public_a.key 和 private_a.key

2. 生成密钥对应的 License Key。
   这个要经常使用，每销售一份需要一个 License Key。

3. 试用版 License 的生成。文件 license.tri

以上两部分功能在文件 LicenseManager.py 中实现，具体可参考其
中的文档说明。


* 安装部署包制作

** Windows 平台

下列文档用于构建 Windows 平台下的安装包：
dsAssistant.iss， info setup 的安装脚本
dsAssistant.mak， NMAKE 格式，用于编译各种源文件。
build_win.bat，建立 NMAKE 环境，调用 dsAssistant.mak

encrypt.bat，用于加密 startup.py 和 dsMain.py

*** 安装包制作

如果版本发生变化，打开 dsAssistant.mak，修改变量
PRODUCTVERSION 为对应的值。

直接双击 build_win.bat 即可生成安装包，存放在
internal\dist\win 目录下面。

安装包的命名规范 dsAssistant-for-win-版本信息.exe
例如：
dsAssistant-for-win-1.0.0.1.exe

*** 部署文档结构
    
    algorithm-elf.exe / algorithm-elf
    dsplayer.exe / dsplayer

    algorithm-elf.pycfg
    algorithm-elf.pycfg.default

    main.ico
    logo.gif
    
    about.pyx
    aftype.pyx
    algorithm-elf.pyx
    buildprocess.pyx
    datapool.pyx
    dsconfig.pyx
    dscore.pyx
    dsgraph.pyx
    dsplayer.pyx
    dssetting.pyx
    dsvision.pyx
    pascal.pyx
    Xix.pyx
    
    register.py 

    parser.exe / parser    
    libiconv-2.dll libintl-8.dll (仅适用于 Windows 平台)

    readme.txt
    readme-zh.txt
    LICENSE
    LICENSE-ZH
    docs/
        getting-started.html
        zh/
            getting-started.html
    locale/

    pylib/
    lib/
    examples/
    publish/

    pyshield.pyd / pyshield.so
    
    pyshield.key
    pyshield.lic
    product.key
    license.tri
    
* 产品版本控制

说明文件版本和产品版本的定义方法和管理方式。

定义

产品版本：是指产品的功能的增强和修改问题的痕迹。

          产品版本有大版本，小版本，修正版本和发布次数四部分
          组成，其中修正版本是针对前两者的计数器，也就是说，
          不管大版本变化还是小版本变化，修正版本都会清零，并
          且重新开始计数。大版本和小版本是指功能的变更，修正
          版本是修改问题之后的重新发布的次数。第四部分对于内
          部测试版本，是指从源文档构建时候的 SVN tag；对于发
          布版本，是日期戳：YYYYMMDD。特别的，对于发布版本，
          在 Mantis 中版本编号会增加一个 *。例如，内部测试版
          本 1.1.2.5890，是一个发布版本，那么，在发布之后，会
          修改其版本号为：1.1.2.5890*, 这就表示他等价于发布版
          本 1.1.2.20100503，也就是 1.1 版本的第二次发布使用
          的是该版本。一旦发布之后，在 Mantis 中增加下一个版
          本， 1.1.3.x, 用于内部测试版本，在送测之前，将版本
          号第四部分修正为正确的 SVN 标签。

          没有正式发布之前的版本主版本号为 0，第四部分每一次
          构建之前从配置库 SVN 获取。

          每一次大小版本增加之后，在 Mantis 中增加一个版本:
          X.Y.1.x，其中 X 是大版本号，Y 是小版本号，第四部分
          的 x 在送测之后修正为配置库的标签。
          
          使用文档 <ProductHistory.txt> 记录整个产品的发布的
          信息。

文件标签：是指文件在SVN库中的标签。

          由配置库自动生成。


文件版本区间：是指该文件被应用于产品的版本列表。

          在文件的头部描述中说明，由编写和修改文档的人进行维
          护。所有的项目文档都有使用的版本区间。

          当产品版本发生变更的时候，被丢弃的文件要修改该属性，
          表示该文档已经不再适用。

          文件版本区间中的版本号不需要包括发布计数器，只需要
          大版本，小版本和修改次数三部分内容就可以。

          文件版本区间可以依次列举，使用分号分隔。例如
          “1.0.2， 1.0.3”。也可以使用中杠连接，譬如
          “1.0.3 - 1.2.9”，表示从 1.0.3 到 1.2.9 之间的所有
          版本。如果当前文档还有效，那么使用 “-” 作为结束标
          志，例如 “1.0.3 -” 表示从 1.0.3 到现在该文档都在
          使用。如果文件已经被丢弃，那么最后一个版本号就是其
          终止的版本。

          例如：

          1.2.0 - 1.2.3, 1.2.5

          表示该文档适用于产品版本1.2.0 到 1.2.3，在下一个版
          本1.2.4，该文档被丢弃，但是在1.2.5版本又被使用到。
          现在该文档已经不再使用。

          如果上例中最后增加一个中杠，例如

          1.2.0 - 1.2.3, 1.2.5 -

          那就表示该文档除了在1.2.4没有使用外，从1.2.5到现在
          一直在被使用。

** ProductHistory.txt

这是版本的控制文档，版本的定义，索引都在此说明。

记录每一个大版本，小版本，修正版本的下列信息：

大版本，
小版本，
修正版本，
发布时间，正式对外发布的时间，格式如下： YYYYMMDD。
发布计数，从正式发布到现在的发布计数器。

以上内容直接从 TrackVersion.xls 对应字段中获得。

功能变化，增强了那些功能，那些功能不再支持。
修正问题，修改了那些存在的问题。
已知问题，还存在的已知的问题。

以上内容也取自 TrackVersion.xls

构建时间，说明构建的时间，精确到秒。（可选）


修改日志，列出本次构建生成的相关文件，各个平台的安装包，发
          布说明等，从配置库中取得和本次发布相关的所有文档清
          单，以及各个文档的变化信息。注明那些文件被修改，修
          改的内容变，那些文件新增，那些文件被删除，那些文件
          被丢弃。

发布标签，本次发布对应的SVN库的标签，同时说明如何使用配置库
          的命令去得到本次发布对应的全部文件。

自身标签，当前文档对应的发布标签，因为这个文档要等其他文档都
          完成之后才能完成，所以标签可能和发布标签不一致。



* 产品开发规范

文件头：版本信息，产品名称，版本区间
文件说明，
创建信息，
变更信息。

** 代码规范：
        参数使用全部小写字母，譬如configure
        全局变量 ds 作为前缀，譬如 dsApplicationConfigure
        局部变量以 _ 作为前缀，譬如 _elements
            或者简单变量 i, k 等只有一个字母，不需要前缀
            用于 for 中的循环变量如果是一个单词，可以不加前缀
        Tkinter 的 StringVar，IntVar 等数据变量以 Var 为后缀。

        类的内部属性以 __ 作为前缀，譬如 __configure
        类的内部方法以 __ 作为前缀，譬如 __setVar
        类的外部方法使用第一个词小写的方式，譬如 setVar
        错误信息的格式化字符串最后不使用任何标点符号。

        类属性命名规范，所有内部方法以双下划线 __ 开头，和
        外部按钮和事件关联的方法以 __action 为前缀，功能一
        般一个词描述，譬如 __pause。
        一般和外部关联的功能事件中需要处理所有的异常，譬如
        按钮的命令事件中必须处理所有异常，并对异常进行最终
        处理，譬如在对话框中显示消息。
        其他功能事件只能抛出相应的异常，不可以做处理。只能
        raise dsException，不能弹出对话框。上层功能函数会根
        据异常进行相应的处理的。

        所有的消息字符串使用双引号，而关键字类型的一般使用单
        引号。譬如 Tk 的控件的属性，一般使用单引号，对于 Tix
        的常量，考虑到兼容性问题，使用 Tix 内部的常量。

** 功能增强规范

产品功能增强版本的开发，按照产品版本计划中的安排进行。

大小版本号从产品版本计划中获得，修正次数清零，发布次数加一。

版本变化之后要修改下列文件的版本信息:

> 在 src/dsAbout.py 中修改版本号，或者版权信息。
> 在 internal/build_win.bat 中修改版本信息。

循环下列操作：

1. 修改代码
2. 多语言相关文档
    源代码中的消息对应的 po 文件的更新
    帮助 dshelp 对应的文件
3. 运行 internal/build_win.bat 构建一个新的版本。
    在每一构建之前，确保所有的文件都已经上传，在 dsAssistant
    根目录查看最新的标签，然后修改下列文件的第四位版本信息
    src/dsAbout.py, internal/build_win.bat

4. 测试所有文档直到全部测试通过。

修改包括如下类型：
 a. 修改产品手册和帮助文档。
 b. 修改产品信息。
 c. 修改源代码。
 d. 修改算法代码。

> 修改产品手册 Handbook
> 修改 internal/ProductHistory.txt，填充本版本的相关信息。
> 生成本版本对应的 Readme-VER.txt，存放到发布目录下，主要根
  据 ProductHistory.txt, 本手册中的产品信息，以及 TrackVersion.xls。


** 修改问题规范

修改问题根据客户的反馈和问题跟踪列表记录的问题进行。
修改问题不影响大小版本号，不是修改一个问题就发布一次，很多情
况下是修改一批问题之后才发布一次。

每一次发布之后，修改版本信息，修正次数加一，发布次数加一。

下面的操作和增强功能规范一致，除了最后发布之后要更新版本计划
中的修正次数和发布次数，因为版本计划只控制到小版本号，但是也
需要记录修正次数和发布次数。

** 多语言规范

*** 源代码

第一次生成直接运行 internal/GeneratePO.bat，可以生成原始的
pot 文件。

然后拷贝成为 messages_zh.po，在 emacs 中编辑，翻译所有项目。

注意要对文件头进行下列修改：
Project-Id-Version: dsAssistant 1.0.0.1 -
POT-Creation-Date: 2009-07-04 10:46
PO-Revision-Date: 2009-07-04 13:42+0800
Last-Translator: Jondy Zhao <jondy.zhao@gmail.com>
Language-Team: Chinese <chinese@dashingsoft.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 8bit
Generated-By: pygettext.py 1.5

该文件在安装包生成的时候会自动生成对应的 mo 文件。

如果是代码发生了修改，那么按照下列步骤更新 po 文件：

> 运行 internal/GeneratePO.bat，生成 src/po/messages.pot
> 在 emacs 的 eshell 中运行：
   msgmerge.exe -U messages_zh.po messages.pot
  合并修改的内容到 messages_zh.po
  合并之前一是要注意备份，二是要修改一个 messages.pot，把头
  部的多字节码（中国什么时间，时区的名称）删除，否则合并的时
  候会出错，不认识那个编码。
> 在 emacs 中翻译 messages_zh.po 中变化的内容
> 可以使用 internal/GenerateMO.bat 生成 mo 文件。

*** 用户文档

包括帮助文件和发布手册。

使用文件名加语言代码后缀来区别，分别进行编写。

帮助文件使用 DocBook 格式的文档，源文件为

src/docs/dshelp.xml

编写完成可以运行批处理文件: internal/GenerateHTML.bat
生成对应语言的帮助文件。

*** 配置文件

配置文件主要是修改 dsdefault.xml，需要国际化的有两部分内容，
一是算法的说明，一是参数的说明。实现方式是分别在元素下面增加
多个<description lang="code">，lang属性不存在表示默认语言。

例如：
   1.  算法 hanoi 的国际化，配置文件的相关内容如下
        <algorithmgroup>
            <algorithm name="hanoi" class="hanoi">
                <description>Hanoi: recursive algorithm</description>
                <description lang="zh">递归演示程序：汉诺塔</description>
             ...

   2.  参数 numberOfPlate 的国际化
       <option>
                <name>nameOfSource</name>
                <type>string</type>
                <value>A</value>
                <description>The name of source pillar.</description>
                <description lang="zh">源柱子的名称.</description>
       </option>

*** 新增算法

修改配置文件 dsdefault.xml ，按照配置文件国际化方式实现。
将源代码拷贝到 src/algorithm 目录下，然后按照 修改代码国际化
的方式实现。

* 内部原理

分为三个执行块，分别是装载，启动认证和主程序。

** 装载过程

装载过程是指 dsload 解密 startup.pyx 并启动的过程。

这部分的异常会打印到控制台，并且每一步都有日志输出到控制台，
虽然发布版的控制台被隐藏，但是还可以通过重定向的方式得到日志
信息，从而解决这部分出现的问题。例如

C:>\Program Files\dsAssistant>dsLoad.exe > log.txt 2&>1

注意一定要将 stderr 的数据一并收集到，使用 2&>1 可以将错误控
制台的内容重定向过来。

dsLoad 模块是 c 语言编写的一个模块，在开发环境主要是用来加密
startup.py，在客户运行环境则用来装载 startup.pyx。

加密采用 DES3 的加密方式，使用 CryptoPP 来加密，CryptoPP 是
一个开源项目，我们编译成自己用的 DLL 来使用。

** 启动和认证过程

启动和认证过程是 startup.py 脚本的执行过程，主要是设置环境和
检查 License，然后解密 dsMain.pyx 并运行。

这部分的异常处理和装载过程一样。

** 主程序

主程序是以 dsMain.py 为主控制函数。

每一个算法都放在 algorithm 下面，这是一个 Python Package，在
程序启动算法的时候，动态装载算法模块，用 __import__ 来导入需
要的算法。这样的好处在于以后增加算法之后，不需要修改主程序，
只要把算法模块放到对应的目录下面就可以。

算法演示程序使用接口 dsDriver 来实现算法模拟，主要使用的数据
结构包括堆栈实体，代码实体和可见实体。

算法基类提供了辅助的一些数据处理，接受参数的基本实现方法。

参考下列代码的模块文档和类文档以及方法文档了解详细的功能：

1. dsDriver.py 模块文档、类文档和方法文档，详细说明提供的可以
   让算法使用的接口，这些接口用于操作堆栈、代码和可见视图。

2. dsStackEntity.py，dsCodeEntity.py，dsVisionEntity.py 的模
   块文档和类文档对实体的结构设计进行了详细说明。

3. algorithm/baseAlgorithm.py 的模块文档和类文档说明了算法中
   使用的数据类型，包括数组、树、图等数据结构的定义，实现了
   和外部配置参数的交互，提供了算法模版，详细说明了如何增加
   一个新算法，是增加新算法的必读文档。

GUI 方面的以 Tk/Tcl 为主，也使用 Tix。 主要用于窗口滚动，组合
框等方面。

模块主要关系：

xxxAlgorithm.py  依赖于 baseAlgorithm.py dsDriver.py 提供的
                 接口。

dsDriver.py 依赖于 dsXXXEntity.py 和 dsXXXView.py


** 字符串编码和UNICODE

源代码内部使用的字符串都是 unicode，这样在字符串进行连接操作
时候，如果 str 和 unicode 混合的话，因为 Python 内部缺省使用
ascii 编码，可能会导致无法转化 unicode 代码。所以，必须保证任
何外部的字符串在进入源代码之前进行转换，转换方式：

if isinstance(value, str):
    return value.decode('utf-8')

外部字符串来源：
1. 配置文件 dsconfig.xml dsdefault.xml
2. 环境变量 DSLicesneKey, 在 dsAbout.py 中使用过一次
3. 窗口控件文本
4. 命令行参数
5. 多语言文件，gettext。
6. 异常返回消息，Python 内部异常或者函数返回的字符串编码

在这些入口点都要详细检查。

目前 gettext 部分这部分存在问题。让他取 unicode，在dsMain.py
中是 unicode，但是其他模块就是 str 了。

** Pycrypto 的编译

Windows，Python 2.6：
1. 解压源代码。
2. 在命令行设定 Path 路径
   SET PATH=%PATH%;C:\python26;C:\cygwin\bin
3. 拷贝 msvcr90.dll 到 C:\python26\libs
4. 使用 mingw32 编译，运行命令：
   python setup.py build -cmingw32
5. 安装
   python setup.py install
 
* 常见问题

** 安装问题

*** 无法安装成功

 > 没有读写安装根目录的权限。
 > 没有安装程序的权限。

*** 安装运行错误

 > 试用版 License 没有正确生成。

** 运行问题

*** 无法出现主窗口的问题

1. 首先检查在安装目录下是否存在 license.lic 文件。

2. 其次检查 images 目录是否存在 logo.gif

3.

解决方案：在命令行运行“dsload.exe > log.txt 2>&1”，发送
log.txt 到jondy.zhao@gmail.com


* 设计文档

** 算法演示原理

    打开一个算法文件(.paf)；

    查看 publish 目录下面是否存在编译好的文件，即对应的(.py)
    文件，如果不存在提示需要编译；

    装载代码到代码视图；

    初始化 dscore.Driver，aftype.DATAPOOL, aftype.VOPTIONS；

    初始化 参数列表，调用堆栈，控制台和数据视图；

    装载算法模块；

    这时候进入交互模块，等待用户进行操作，譬如可以修改算法参
    数等，点击启动则开始执行算法对应的脚本文件。

** 可见数据视图

   dsgraph.py

   初始化: view = dsgraph.VisionView(master, options)

       options 是控制各种类型的结点和各种数据类型的显示选项；

   算法启动：

       view.reset()

       可见数据视图自动生成一个全局堆的执行框架，用于存放全
       局变量和动态申请的变量。

       可见数据视图始终有一个默认的执行框架，就是当前调用框
       架。

   对外接口：
       push(name) 增加执行框架，并设置为当前执行框架
       pop() 弹出当前执行框架，并设置调用者为当前框架
       
       add_variable(var)  在当前框架内增加一个变量
       remove_variable(var) 在当前框架内删除一个变量

       update_variable(var, value) 修改 var 的显示, value 可
       能为 None，表示隐藏对应的变量

       select_variable(var) 选中一个变量，设置输入焦点

       show_variable(var) 显示隐藏的变量
       hide_variable(var) 隐藏一个变量       
       active_variable(var) 激活一个变量
       deactive_variable(var) 取消激活变量

       refresh() 刷新数据视图

    每一层执行框架在数据视图都是从上往下依次排列；

    每一层框架中增加变量的规则是：

        第一行存放简单变量和结构体，每增加一个孩子列数加一。        
        第二行存放显示方向为垂直的列表，所有这种类型的列表都
        放在第二行。
        对于树、图和水平方向显示的列表，从第三行开始，每一个
        变量占一行，依次加到最后面。

        隐藏一个变量的时候保存其 grid 信息，显示的时候还用原
        来的信息；
     



    

