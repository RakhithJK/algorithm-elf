* 目录

 + 概述

 + 使用教程

 + 辅助功能
   ++ 设定语言
   ++ 设定演示参数
   ++ 设定外观

 + 附录  
   ++ 算法参数格式
   ++ 增加新的算法
   ++ 增加多语言支持

* 概述


德新数据结构辅助教学软件是一个直观显示数据结构各种算法执行过
程中代码、堆栈和数据变化过程的辅助工具。该工具使用直观的方式
显示了常用数据结构算法（递归，链表，树，图，排序，查找等）的
实现过程，用户可以设置算法的初始参数，然后交互式的查看算法的
执行过程中堆栈、代码和数据的变化，其中数据的变化通过图像化的
方式，譬如树，图或者链表的方式直观的显示出来，代码和堆栈也是
通过图像显示出入栈，函数的调用，代码的执行等过程细节，这样便
于用户理解这些细节。用户还可以把执行过程的每一个操作步骤以文
字的形式保存起来，还可以使用动画的方式查看整个执行的过程，可
以回放历史执行过程。

本软件的适用对象：

一是数据结构培训老师，可以用于设计课件。与使用传统工具制作课
件的方法相比，本工具可以提供动态的参数。譬如快速排序，传统课
件只能对一组固定的数据制作课件，而本工具可以任意设定初始的关
键字，然后自动生成快速的操作过程，我们可以选用其中的部分作为
课件的内容。

二是学习数据结构，具备一定基础的学生，可以帮助其理解算法执行
过程的每一个细节和步骤，堆栈的变化，数据的变化等，从而更快和
更深入的对算法进行理解。


* 使用教程

** 启动

+ 在桌面双击图标 数据精灵 启动主程序

+ 如果没有注册，那么会弹出注册对话框，提示试用剩余的天数。
  点击 退出，退出程序。
  点击 注册，弹出网页，显示注册主页。
  点击 试用，开始试用。
  
  如果已经注册，该窗口不会弹出。

** 选择算法  

+ 在主窗口左侧顶部算法组合框中选择一个算法。

+ 主窗口根据算法的初始入口参数显示代码，可见的实体，堆栈状态。

  这时候有两个选择，
  
  如果你想修改初始参数，譬如要遍历的树的结构，要排序的列表内
  容，可以点击 算法设置 按钮，弹出算法参数设置对话框。
  
  如果你不想修改初始参数，那么直接跳转到 {算法演示}
   
** 算法参数设置
  
+ 在算法设置窗口左部，是算法参数的列表。将鼠标移动到相应的参
  数上面，会在下面显示参数的说明。
  
+ 可以直接在参数名称后面的编辑框中修改参数。

+ 对于比较长的参数类型，一般后面会有一个 左箭头 按钮，点击按
  钮，在右边的多行文本编辑框会显示一个对号和错号按钮，以及参
  数的详细内容，可以在这里修改参数内容。
  
  点击多行编辑框上面的 对号 按钮，保存参数的内容；
  点击多行编辑框上面的 错号 按钮，放弃本次的修改。
  
  注意，这里并不真正保存参数内容到磁盘文件，只是设定参数的值，
  只有点击下面的 应用 按钮或者 确定 按钮才真正写磁盘。
    
+ 对于复杂参数，譬如树类型和图类型，以及列表类型的输入格式，
  参考下面的 {算法参数格式说明}
  
+ 参数修改完成之后，
  点击 应用 按钮，将当前修改存盘，不关闭参数配置对话框。
  
  点击 确定 按钮，将当前修改存盘，关闭参数配置对话框，返回到
  主窗口，并按照新参数对算法进行初始化，显示主窗口的代码堆栈
  等视图。
  
  点击 取消 按钮，放弃本次修改，返回主窗口。
  
  点击 缺省值 按钮，本次修改内容全部无效，将所有参数的值设定
  为安装时候的缺省值。
  
+ 如果参数配置不正确，一般情况下会在输入的时候进行校验，但是
  还会存在一些漏网之&lt;。)#)))≦，这是程序的一些小Bug。如果出现
  这种情况，点击确定之后会提示算法初始化失败。
  
  碰到这种情况，最简单的解决方式就是重新点击 算法设置 按钮，
  然后点击 缺省 按钮，恢复缺省值即可。
  
** 算法演示

如果算法初始化正确，那么主窗口会显示堆栈，代码和可见的实体视
图。并且演示的命令控制按钮 启动 和 单步执行 已经可用，这时候
就可以算法演示。

+ 点击启动按钮，算法开始连续执行。
   
  或者点击 单步执行，进行单步操作。每点击一次，执行一条代码语
  句。
   
  在连续执行模式，可以点击控制按钮 延时 的增加和减小的小按钮，
  来设定算法执行每一条语句之后的延时值，延时的单位是 毫秒，也
  可以直接输入延时值。
  
  在连续执行模式，如果需要进行单步模式，点击暂停按钮之后，单
  步执行按钮就可以使用。
  
  在单步模式，点击 恢复运行 按钮，就可以进行连续执行模式。
  
+ 点击暂停，算法暂时停止执行，这时候可以查看堆栈的状态等。

+ 点击 重新启动 按钮，算法将终止执行，并且重新初始化，然后在
  运行。

+ 点击 终止按钮，算法演示过程将终止。

+ 算法正常演示完成之后，可以选择新算法，也可以重新演示该过程，
  还可以单独回放算法的动画过程。
  
算法演示的内容说明：

算法演示包括三部分内容，代码、堆栈和可见视图。

代码视图显示当前执行的代码，在源代码视图的上面，显示的函数调
用序列，格式为连续的 “函数名称 : 行号”，也就是说，在该函数
的第几行开始调用下一个子函数的。最后一个显示就是当前执行函数
的主函数和行号。

代码视图始终高亮显示当然执行的代码行，在暂停模式，把鼠标移动
到该代码上，可以显示局部变量的值等。

堆栈视图显示的堆栈变化情况，堆栈视图的顶部显示的是全局变量，
然后下面会显示每一次函数调用之后堆栈的变化情况。每一次函数调
用会产生入栈，当前函数的局部变量全部显示在堆栈中，每一次函数
的调用返回都会产生出栈。

堆栈的格式，顶部是全局变量标题，下面使用 “全部变量名称 : 值”
的格式显示全局变量，如果没有全局变量，那么这一部分内容为空。

全局变量下面是局部变量。每一次函数调用，产生一个局部堆栈标题，
显示函数名称和调用的层数，下面使用 “参数名称 : 参数值” 的格
式显示当前函数的全部局部变量。

在算法的执行过程中，当前变化的堆栈参数会高亮显示，表示这个参
数的值发生了变化。

可见视图是人性化的方式显示算法数据变化，主要包括树，图，列表
等结构。用直观的方式来表示算法内部的数据变化。

在整个算法的演示过程中，有一个 时间指针 （像手一样的图标）始
终指向当前活动的焦点，譬如执行的代码行的变化，堆栈参数的变化，
可见视图的变化等。

+ 算法执行完成之后，可以回放算法执行的动画过程，也可以查看算
  法执行日志，了解算法执行的详细步骤。
  
  分别参考下面的章节 {算法动画过程回放} 和 {算法执行日志}


** 算法动画回放

在算法执行完成之后，可以回放算法执行的动画过程。

+ 点击 主菜单 按钮，主菜单 在主窗口的右上角，有一个斜向上的小
  小按钮。

+ 点击 回放 菜单，弹出算法回放窗口。

  回放窗口也可以单步和连续执行，只不过没有代码和堆栈视图，只
  有人性化的数据视图。

** 算法执行日志

+ 查看算法执行日志

点击窗口下方的按钮 算法日志，在按钮右面显示算法执行日志信息。

算法执行日志记录了算法的每一步执行过程，执行的源代码，对应的
局部变量的值，堆栈、可见视图等变化情况的文字说明等。

通过算法一步步的查看执行日志可以详细的跟踪算法的整个执行过程。

+ 保存算法执行日志，

点击 主菜单 按钮，弹出主菜单。

点击 保存日志 菜单，弹出文件选择对话框，输入文件名称，点击确
定即可。日志文件是普通的文本文件。



* 辅助功能

辅助功能都在主菜单里面，主菜单就在主窗口的右上角，有个小小箭
头，点击就出现主菜单。

** 设定语言

+ 在主窗口点击 主菜单 按钮

+ 在主菜单点击 选项设定 菜单项，弹出定制选项对话框。

+ 在定制选项对话框的第一个配置项就是语言选项，下拉列表中显示
  就是全部可用的语言，选择之后，点击确定即可。

** 设定演示参数

+ 在主窗口点击 主菜单 按钮

+ 在主菜单点击 选项设定 菜单项，弹出定制选项对话框。

+ 在定制选项对话框的左边列出了全部可用的配置项，修改成为对应
  的值，点击确定即可。

* 附录

** 算法参数格式说明

算法参数有下列类型，
    简单类型，包括字符串，数值。
    列表类型，主要用于排序和查找，以及链表算法。
    树类型，
    图类型。
        
*** 简单类型        
   对于简单类型，有三种输入方式，
   		直接在输入框输入；
   		对于整数类型，可以使用增大减小按钮进行设置；
   		对于枚举类型，从下拉列表框中直接选择。

*** 列表类型            
   
   列表类型，是用逗号分开的一个字符串。目前不支持列表元素
   中包括逗号。因为对于算法来说，可以避免参数中带有逗号。
   
*** 树类型   
   
   树类型内部是使用字符串来保存树结构。下面详细说明树结构
   的字符串表示方式：
   
   (说明：在 2.0 版本中，树的输入方式会实现可视化输入，这
          个版本因为时间关系，暂时使用字符串输入）
          
   例如，下面是一个二叉树，生成树结构的字符串描述方式如下。
                        A
                       / \
                      /   \
                     B    C
                    /    / \
                   /    /   \
                  D    E     F
                      / \     \
                     /   \     \
                    G     H     I 


               1. 找到根结点，以及其孩子结点，使用冒号分开父
               节点和孩子结点，孩子结点前后增加方括号，多个
               孩子使用逗号分开，例如 A : [B, C]。
               2. 找到根结点的第一个孩子，继续按照上面的方法
               来描述这个孩子结点，例如：B:[D]。然后把这一部
               分增加到父结点描述部分，并使用分号分隔，例如：
               A:[B, C]; B:[D]
               3. 按照上面的方法把根结点所有的孩子描述出来，
               例如：
               A:[B, C]; B:[D]; C:[E, F]
               4. 然后依次处理根结点的所有的孩子结点，也就是
               第二层所有结点，处理完第二层，然后是第三层等
               等。例如上例中最后形成的描述字符串就是：
               A:[B, C]; B:[D]; C:[E, F]; E:[G, H]; F:[I]            
               
*** 图类型   
   
   图类型内部是使用字符串来保存树结构。下面详细说明图结构
   的字符串表示方式：
   
   (说明：在 2.0 版本中，图的输入方式会实现可视化输入，这
          个版本因为时间关系，暂时使用字符串输入）
          
   例如，下面是一个简单的无向图，生成图结构的字符串描述方式如下。                        
                        1
                       / \
                      /   \
                     2     3  
                     |\    |
                     | \   |
                     |  \  |
                     |   \ |
                     4 --- 5

                1. 从第一个结点开始，依次描述和第一个结点相
                   关的连线。使用一个结点对描述，例如
                   (1, 3)
                   园括号表示的是无向连接。
                   如果两者之间的连线是有向的，那么使用
                   &lt;1, 3&gt; 
                   尖括号表示箭头指向后者，
                   如果两者之间的连线是双向的，那么使用
                   [1, 3]
                   方括号表示双向连接。
                2. 把和第一个结点相关的连线全部描述出来，使
                   用分号分隔不同的结点对，例如：
                   (1, 2); (1, 3)
                   如果连线是单向的，并且当前结点不是箭头指
                   向的结点，那么这里暂时不描述这条连线。其
                   他连线在这里描述过后，在另外一个结点将不
                   再描述。例如 (1, 3) 连线，在这里说明过后，
                   在结点3则不会在描述这条连线。
                3. 依次遍历各个结点，描述出和结点相关的未描
                   述的连线。例如，上图最终形成的描述字符串
                   如下
                   (1, 2); (1, 3); (2, 4); (2, 5); (3, 5);
                   (4, 5)
                   


** 增加新算法

参考源文件 baseAlgorithm.py 的文档说明。
       
** 增加语言

本程序支持国际化，如何想增加一种新的语言支持，需要按照如下步
骤进行。

源代码部分，
        在源文件中使用 _ 调用，然后从 po 文件中获取。使用
        pygettext 功能自动扫描源文件生成 po 文件。

配置文件部分，
        
        配置文件部分主要是参数说明和算法说明部分的国际化，主
        要是针对其中的 &lt;description&gt; 元素，可以同时增加
        lang 属性，例如 &lt;description lang="zh"&gt; 的方式
        来支持多语言。

算法部分，
        一个是算法说明，也就是模块文档。和源代码中一样，还有
        一部分就是配置参数的国际化，和配置文件部分一样。

系统对话框部分（文件对话框）
        目前就使用了一个 tkFileDialog,
        如果其本身没有实现多语言，则暂时不做考虑。

帮助文件，
        使用文件名加语言代码区分。缺省文件名称 dshelp.html 增
        加语言代码之后为 dshelp_NN.html，例如 dshelp_zh.html
        
Release Note       

	使用文件名加语言代码区分。缺省文件名称 Readme.txt 增
        加语言代码之后为 Readme_NN.html，例如 Readme_zh.html
        

