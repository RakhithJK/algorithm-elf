<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book SYSTEM "/usr/share/sgml/docbook/xml-dtd-4.1.2/docbookx.dtd">
<book lang="zh-cn">
<title><productname>算法精灵</productname>使用入门</title>
<bookinfo> 
   <author>
      <firstname>俊德</firstname>
      <surname>赵</surname>
   </author>
   <revhistory>
        <revision>
            <revnumber>0.1</revnumber>
            <date>2010-09-18</date>
            <authorinitials>赵俊德 - jondy.zhao@gmail.com</authorinitials>
            <revremark>创建文档。</revremark>
         </revision>
        <revision>
            <revnumber>0.2</revnumber>
            <date>2010-11-10</date>
            <authorinitials>赵俊德 - jondy.zhao@gmail.com</authorinitials>
            <revremark>修改安装方式章节，增加 tar 包的安装。</revremark>
         </revision>
      </revhistory>
</bookinfo>

<chapter>
<title>概述</title>
<para>
<productname>算法精灵</productname>是一款辅助学生理解算法实现过程的教学软件。它支持的主要功能包括：
<itemizedlist>
<listitem><para>
经典算法过程的动画演示；
</para></listitem>
<listitem><para>
使用类 Pascal 语言编写算法，然后动画演示算法执行过程；
</para></listitem>
<listitem><para>
使用图形化的方式设置算法的传入参数，譬如二叉树、需要排序的队列等；
</para></listitem>
</itemizedlist>
</para>
<para>
下面我们是两个典型的使用<productname>算法精灵</productname>的场景：
<variablelist>
<varlistentry>
<term>老师在课堂上讲解算法</term>
<listitem><para>
张教授正在给学生讲解快速排序算法，他启动<productname>算法精灵</productname>，打开快速排序算法，输入一组需要排序的数据，点击算法演示，<productname>算法精灵</productname>使用动画的方式显示出这组数据的排序过程：每一个排序步骤数据的比较和交换等等。
</para></listitem>
</varlistentry>
<varlistentry>
<term>学生在设计自己的算法程序</term>
<listitem><para>
王小丫是大二学生，正在完成数据结构的作业：编写一个二叉树先序遍历的算法。她启动<productname>算法精灵</productname>，使用类 Pascal 语言输入二叉树先序遍历算法，然后从<productname>算法精灵</productname>数据池中选择一颗二叉树，使用<productname>算法精灵</productname>的单步演示模式，<productname>算法精灵</productname>会一步步的显示二叉树的结点被访问的顺序。如果算法存在问题，<productname>算法精灵</productname>会提示正确的信息或者使用图片显示出来，譬如访问的顺序不正确等。
</para></listitem>
</varlistentry>
</variablelist>
</para>
</chapter>

<chapter>
<title>安装和启动</title>

<para>
你可以从 http://zh-cn.dashingsoft.com 下载最新的安装包，
<productname>算法精灵</productname>目前可以运行于 32 位 Windows 平台和 Linux 兼容的平台：
<variablelist>
<varlistentry>
<term>Windows 平台</term>
<listitem><para>
在 Windows 平台下的安装包是一个可执行文件: algorithm-elf-1.2.1.exe ，直接双击安装包，按照提示完成安装；安装成功完成会有<productname>算法精灵</productname>的开始菜单程序组；
</para>
<para>
点击开始菜单 -> Algorithm-Elf 中的 algorithm-elf 即可启动<productname>算法精灵</productname>。
</para></listitem>
</varlistentry>
<varlistentry>
<term>Linux 平台</term>
<listitem><para>
Linux 平台下使用 RPM 格式的安装包：algorithm-elf-1.2.1-1.i686-linux.rpm，使用下面的命令安装<productname>算法精灵</productname>：
<programlisting>
    $ rpm -ivh algorithm-elf-1.2.1-1.i686-linux.rpm
</programlisting>
<note><simpara>如果权限不够的话，请切换到超级用户执行安装。</simpara></note>
安装默认目录为 /usr/algorithm-elf，安装完成之后在终端执行下列命令启动<productname>算法精灵</productname>
<programlisting>
    $ cd /usr/algorithm-elf
    $ ./algorithm-elf.bin
</programlisting>
</para><para>
如果你使用 tar 包安装，首先下载 algorithm-elf.1.2.1.tar.gz，然后运行命令：
<programlisting>
    $ tar xzf algorithm-elf-1.2.1.tar.gz
</programlisting>
在当前目录下会创建一个 algorithm-elf 的子目录，运行下面的命令启动算法精灵：
<programlisting>
    $ cd algorithm-elf
    $ ./algorithm-elf.bin
</programlisting>
</para></listitem>
</varlistentry>
</variablelist>
</para>

</chapter>

<chapter>
<title>使用示例算法</title>
<para>
<productname>算法精灵</productname>内嵌了一些经典算法，主要包括递归算法汉诺塔，二叉树遍历和线索化算法，快速排序、归并排序等。下面我们以汉诺塔为例说明如何使用这些算法

<variablelist>
<varlistentry>
<term>动画演示算法执行过程</term>
<listitem><para>
<orderedlist>
<listitem><para>
点击菜单<guimenu>文件</guimenu>中的<guisubmenu>打开示例</guisubmenu>，选中<guimenuitem>汉诺塔</guimenuitem>
</para></listitem>
<listitem><para>
点击工具栏按钮<guibutton>演示</guibutton>，弹出算法演示窗口，下面的操作都是在算法演示窗口中执行
</para></listitem>
<listitem><para>
点击工具栏按钮<guibutton>启动</guibutton>，启动算法演示
</para></listitem>
<listitem><para>
点击工具栏按钮<guibutton>运行</guibutton>，等待算法演示完成
</para></listitem>
</orderedlist>
<tip><simpara>
可以设定动画演示的速度，在工具栏右边的<guibutton>延迟时间</guibutton>中输入一个数值，表示算法每执行一步延迟的毫秒数，可以根据电脑的速度调整，使得演示过程能够直观清晰。
</simpara></tip>
</para></listitem>
</varlistentry>

<varlistentry>
<term>单步执行算法</term>
<listitem><para>
在上面的演示中，启动算法之后，点击<guibutton>单步</guibutton>，而不是<guibutton>运行</guibutton>，进入单步执行模式；
<itemizedlist>
<listitem><para>
点击<guibutton>单步</guibutton>，每点击一次，执行一行算法代码
</para></listitem>
<listitem><para>
在单步模式，点击<guibutton>运行</guibutton>，进入动画演示模式
</para></listitem>
<listitem><para>
在动画演示过程，点击<guibutton>暂停</guibutton>，进入单步模式
</para></listitem>
</itemizedlist>
单步模式主要是为了查看数据和详细的了解算法执行过程
</para></listitem>
</varlistentry>

<varlistentry>
<term>改变算法传入参数</term>
<listitem><para>
<productname>算法精灵</productname>允许任意改变算法的传入参数，假设我们要使用5个盘子来演示汉诺塔，在算法演示窗口，操作如下
<orderedlist>
<listitem><para>
点击窗口右边的<guibutton>算法参数</guibutton>，这时候会显示出算法使用的参数：n, x, y, z
</para></listitem>
<listitem><para>
选中<guibutton>n</guibutton>，点击原来的值<guibutton>3</guibutton>，输入新值: 5
</para></listitem>
<listitem><para>
选中<guibutton>x</guibutton>，在下面的属性列表中，设置<guibutton>尺寸</guibutton>为 5
</para></listitem>
<listitem><para>
对参数 y, z 进行和 x 相同的操作
</para></listitem>
<listitem><para>
点击<guibutton>应用</guibutton>
</para></listitem>
<listitem><para>
点击<guibutton>启动</guibutton>，重新开始算法演示，这时候你可以注意到新设置的参数已经生效
</para></listitem>
</orderedlist>
</para></listitem>
</varlistentry>
</variablelist>
查看其他算法和汉诺塔类似。
</para>
</chapter>

<chapter>
<title>编写自己的算法</title>
<para>
使用<productname>算法精灵</productname>编写自己的算法程序，对于数组、链表、队列、树、堆等数据结构，<productname>算法精灵</productname>都可以动画演示算法的执行过程。
</para>
<para>
<productname>算法精灵</productname>目前支持的算法语言是 Pascal 的一个子集，你可以使用 Pascal 语言来编写自己的算法，下面是编写一个新算法的操作步骤
<variablelist>
<varlistentry>
<term>编写算法</term>
<listitem><para>
<orderedlist>
<listitem><para>
启动<productname>算法精灵</productname>
</para></listitem>
<listitem><para>
点击工具栏按钮<guibutton>新建</guibutton>
</para></listitem>
<listitem><para>
在编辑区输入算法，
<programlisting>
<![CDATA[
program locate_sequence_list;
type
  sqlist: array [ 1..3 ] of integer;
var
  va: sqlist;
  k: integer;
  index: integer;

  function loc_sqlist(var va: sqlist; x : integer) : integer;
    var
      i : integer;
    begin
      i := 1;
      while i <= 3 and va[i] <> x do
        i := i + 1;
      if i > 3 then
        result := 0
      else
        result := i
    end;

begin
  va[1] := 5;
  va[2] := 8;
  va[3] := 9;  
  k := 8;
  index := loc_sqlist(va, k);
end.
]]>
</programlisting>
算法语言和标准 Pascal 类似，但是函数的返回值使用关键字 result 而不是函数名称
</para></listitem>
<listitem><para>
点击<guibutton>保存</guibutton>，选择要保存的路径，输入文件名称，点击确定
</para></listitem>
</orderedlist>
</para></listitem>
</varlistentry>

<varlistentry>
<term>编译算法</term>
<listitem><para>
点击<guibutton>编译</guibutton>，如果算法编译失败，那么右边的编译消息窗口会显示具出错的行号和原因，修改这些问题，直到提示编译成功
</para></listitem>
</varlistentry>

<varlistentry>
<term>演示算法</term>
<listitem><para>
算法编译成功之后才可以进行算法演示，演示方式和内置算法类似，点击<guibutton>演示</guibutton>即可
</para></listitem>
</varlistentry>
</variablelist>
关于算法语言的细节，譬如支持的语法、可以使用的 Pascal 库函数请参考附录中<link linkend="pascal-language">算法语言</link>。
</para>
</chapter>

<chapter>
<title>使用数据池</title>
<para>
在上例中，我们的算法使用的参数是固定的，如果在算法内部修改算法的参数需要重新编译之后才能演示，那么如何可以动态的修改算法参数呢？答案就是数据池。
</para>
<para>
<productname>算法精灵</productname>内置的算法大部分都使用了数据池，数据池的作用就是定义大量的常用数据，譬如队列、树、排序数组等，以供算法使用；如果算法使用数据池的数据，那么不需要修改算法，只要改变数据池数据，就可以改变算法的传入参数，这就解决了我们上面的问题。
</para>
<para>
打开汉诺塔算法，我们可以看到，那些使用数据池的变量在声明的时候前面都有一个 '@' 符号，事实上，这就是使用数据池的基本方法：使用 '@' 为前缀来声明变量。下面我们将上例的传入参数使用数据池来实现
<orderedlist>
<listitem><para>
启动<productname>算法精灵</productname>
</para></listitem>
<listitem><para>
点击工具栏按钮<guibutton>打开</guibutton>，选择刚才保存的算法文件
</para></listitem>
<listitem><para>
在编辑区修改算法内容如下，
<programlisting>
<![CDATA[
program locate_sequence_list;
type
  sqlist: array of integer;
var
  @va: sqlist;
  @k: integer;
  index: integer;

  function loc_sqlist(var va: sqlist; x : integer) : integer;
    var
      i : integer;
    begin
      i := Low(va);
      while i <= High(va) and va[i] <> x do
        i := i + 1;
      if i > High(va) then
        result := 0
      else
        result := i
    end;

begin
  index := loc_sqlist(va, k);
end.
]]>
</programlisting>
</para></listitem>
<listitem><para>
点击<guibutton>保存</guibutton>
</para></listitem>
<listitem><para>
点击<guibutton>编译</guibutton>
</para></listitem>
<listitem><para>
点击<guibutton>演示</guibutton>，进入算法演示窗口；下面的操作都是在算法演示窗口
</para></listitem>
<listitem><para>
点击工具栏按钮<guibutton>算法参数</guibutton>，可以看到下面列出两个参数: va, k
</para></listitem>
<listitem><para>
选择<guibutton>va</guibutton>
</para></listitem>
<listitem><para>
选择参数下面的属性<guibutton>类型</guibutton>的值为：数组
</para></listitem>
<listitem><para>
设置参数下面的属性<guibutton>尺寸</guibutton>的值为：5，指定数组的大小
</para></listitem>
<listitem><para>
点击数组的任何一个结点，可以修改对应元素的值
</para></listitem>
<listitem><para>
选择<guibutton>k</guibutton>
</para></listitem>
<listitem><para>
点击图形结点，输入新值: 15
</para></listitem>
<listitem><para>
点击<guibutton>应用</guibutton>，参数设置完毕
</para></listitem>
<listitem><para>
这时候可以使用设置的参数进行算法演示，演示完成之后可以修改参数，然后重新演示
</para></listitem>
</orderedlist>
</para>
</chapter>

<chapter>
<title>设置断点和监控表达式</title>
<para>
设置断点允许指定算法执行到某一行暂停演示，监控表达式允许设定当表达式的值发生变化之后，暂停演示，进入单步模式；这是<productname>算法精灵</productname>的高级用法，用于发现算法中比较隐蔽的数据错误；
</para>
<para>
设置断点和监控表达式都是在进入算法演示的时候才可用，下面的操作都是在算法演示窗口内执行
<variablelist>
<varlistentry>
<term>设置断点</term>
<listitem><para>
点击需要设置断点的行，然后按键<keycap>b</keycap>；或者直接点击代码行的行首
</para>
<para>
点击工具栏按钮<guibutton>断点</guibutton>，显示断点列表，这里中会看到新增加的断点
</para></listitem>
</varlistentry>
<varlistentry>
<term>设置监控表达式</term>
<listitem><para>
在代码窗口选中需要监控的表达式，然后按键<keycap>w</keycap>；或者在断点列表窗口的下方输入需要监控的表达式，点击按钮<guimenuitem>数据断点</guimenuitem>
</para></listitem>
</varlistentry>
<varlistentry>
<term>清除断点或者监控表达式</term>
<listitem><para>
点击工具栏按钮<guibutton>断点</guibutton>，显示出断点列表窗口，点击需要删除的项，选中的行首会有标识：*
</para>
<para>
点击列表下面的按钮<keycap>移除</keycap>，删除选中的项
</para></listitem>
</varlistentry>
</variablelist>
设置断点或者监控表达式之后，可以启动算法演示；在演示的过程中，遇到断点或者监控表达式的值发生了变化，就暂停演示，进入单步模式；这时候可以查看执行堆栈、变量数据等，以发现问题所在。
</para>

</chapter>

<appendix id="pascal-language"><title>算法语言</title>
<para>
算法语言基本和 Pascal 类似，但是目前版本不支持 with语句，不支持 子范围类型（Subrange），并且库函数也只实现了部分。
</para>
<sect1><title>算法文件结构</title>
<para>
一个典型的算法文件结构如下：
<programlisting>
program 算法名称;

const

  常量定义;         { 可选 }

type

  类型定义;         { 可选 }

var

  变量声明;         { 可选 }

  函数或者过程定义; { 函数或者过程定义必须在声明的最后部分 }

begin               { 算法入口 }

  赋值和控制语句序列

end.
  
</programlisting>
</para>
</sect1>

<sect1><title>数据类型</title>
<para>
简单数据类型
<variablelist>
<varlistentry>
<term>Integer</term>
<term>Real</term>
<term>Char</term>
<term>Boolean</term>
<term>String</term>
<listitem><para>
示例：
<programlisting>
var
  r: Real;
  i: Integer;
  c: Char;
  b: Boolean;
</programlisting>
</para></listitem>
</varlistentry>
</variablelist>
复合数据类型
<variablelist>
<varlistentry>
<term>Set</term>
<term>Enum</term>
<term>Record</term>
<term>Array</term>
<listitem><para>
示例：
<programlisting>
var
  set1: set of Integer;
  arr1: array of Integer;       { 动态数组 }
  arr2: array [0..10] of String;
  r1: record of
       name: String;
       age: integer;
     end;
  e: (apple, pear, banana, orange, lemon);	
</programlisting>
</para></listitem>
</varlistentry>
</variablelist>
自定义数据类型和指针数据类型
<programlisting>
type
  x = Integer;
  y = x;
  ...

type 
  a = Array [1..10] of Integer;
  b = record
        x: Integer;
        y: Char
      end;

type 
  a = ^b;
  b = record
        x: Integer;
        y: Char;
        z: a
      end;
var
  pointertob: a;
  pInt : ^Integer;

new(pointertob);

pointertob^.x := 10;
pointertob^.y := 'A';
pointertob^.z := nil;
</programlisting>
</para>
</sect1>

<sect1><title>控制语句和表达式</title>
<formalpara><title>控制语句</title>
<para>if, while, repeat, case, for
<programlisting>
<![CDATA[
    while a<>b do 
      writeln('Waiting');
 
    if a > b then
      writeln('Condition met')
    else 
      writeln('Condition not met');
 
    for i := 1 to 10 do
      writeln('Iteration: ', i:1);
 
    repeat
      a := a + 1
    until a = 10;
 
    case i of
      0: write('zero');
      1: write('one');
      2: write('two');
    end;
]]>
</programlisting>
</para>
</formalpara>
<formalpara><title>表达式</title>
<para>
<programlisting>
<![CDATA[
      数值表达式： +, -, *, / 

         1 + a, 2 * 4, 3.5 / 6

      布尔表达式: and, or, not, <, >, <=, >=, <>
      
         a and b 
         a = b
      
      字符串表达式: +
      
         'abc' + 'efg'

      集合运算: in 
         
          a in [1,2,3]  

      指针运算: ^ , @
          
          p^ := s;
          p  := @i;
          p  := addr(x);

      访问记录体: .

          s.name := 'jondy';

      赋值语句：:=

          s := 2;
]]>
</programlisting>
</para>
</formalpara>
</sect1>
<sect1><title>函数和过程</title>
<para>函数和过程的定义示例
<programlisting>
  function next(k: integer): integer;
  begin
    result := k + 1
  end;

  procedure print(var j: integer); 
  begin
    writeln('The total is: ', j);
    j := next(j)
  end;
</programlisting>
<note><simpara>
函数的返回值使用关键字 result 返回，而不是函数名称，这是和标准 Pascal 不兼容的地方之一。
</simpara></note>
<note><simpara>
不支持在函数定义中再次定义其他函数。
</simpara></note>
</para>
</sect1>

<sect1><title>扩展功能：数据池</title>
<para>数据池功能是 Pascal 不支持的，访问数据池的方式是在变量声明的时候使用 '@' 作为变量前缀，那么该变量在执行过程中会被自动使用数据池中的同名变量来赋值。
<programlisting>
var
    @x: Integer;
begin
    writeln('Get the value from datapool: ', x);
end.
</programlisting>
</para>
</sect1>
<sect1><title>系统函数库</title>
<para>这里实现了常用了的 Pascal 的库函数，这里定义的函数可以直接在算法中使用</para>
<variablelist>
<varlistentry>
<term>abs</term>
<listitem>
<para><programlisting>
function Abs(X);
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>addr</term>
<listitem>
<para><programlisting>
function Addr(X): Pointer;
</programlisting></para>
</listitem></varlistentry><varlistentry>
<term>chr</term>
<listitem>
<para><programlisting>
function Chr(X: Byte): Char;</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>copy</term>
<listitem>
<para><programlisting>
function Copy(S; Index, Count: Integer): string;
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>cos</term>
<listitem>
<para><programlisting>
function Cos(X: Extended): Extended;
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>delete</term>
<listitem>
<para><programlisting>
procedure Delete(var S: string; Index, Count:Integer);
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>dispose</term>
<listitem>
<para><programlisting>
procedure Dispose(var P: Pointer);
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>exp</term>
<listitem>
<para><programlisting>
function Exp(X: Real): Real;</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>frac</term>
<listitem>
<para><programlisting>
function Frac(X: Extended): Extended;
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>high</term>
<listitem>
<para><programlisting>
function High(X);
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>insert</term>
<listitem>
<para><programlisting>
procedure Insert(Source: string; var S: string; Index: Integer);
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>int</term>
<listitem>
<para><programlisting>
function Int_(X: Extended): Extended;
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>length</term>
<listitem>
<para><programlisting>
function Length(S): Integer;
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>ln</term>
<listitem>
<para><programlisting>
function Ln(X: Real): Real;
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>low</term>
<listitem>
<para><programlisting>
function Low(X);
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>move</term>
<listitem>
<para><programlisting>
procedure Move(const Source; var Dest; Count: Integer);
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>new</term>
<listitem>
<para><programlisting>
procedure New(var P: Pointer);
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>odd</term>
<listitem>
<para><programlisting>
function Odd(X: Longint): Boolean;
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>ord</term>
<listitem>
<para><programlisting>
function Ord(X);
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>ptr</term>
<listitem>
<para><programlisting>
function Ptr(Address: Integer): Pointer;
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>pos</term>
<listitem>
<para><programlisting>
function Pos(Substr: string; S: string): Integer;
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>round</term>
<listitem>
<para><programlisting>
function Round(X: Extended): Int64;
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>setlength</term>
<listitem>
<para><programlisting>
procedure SetLength(var S; NewLength: Integer);
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>sin</term>
<listitem>
<para><programlisting>
function Sin(X: Extended): Extended;
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>sqr</term>
<listitem>
<para><programlisting>
function Sqr(X: Extended): Extended;
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>sqrt</term>
<listitem>
<para><programlisting>
function Sqrt(X: Extended): Extended;
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>trunc</term>
<listitem>
<para><programlisting>
function Trunc(X: Extended): Int64;
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>write</term>
<listitem>
<para><programlisting>
procedure Write([ var F: Text; ] P1 [, P2, ...,Pn ] );
</programlisting></para>
</listitem>
</varlistentry>
<varlistentry>
<term>writeln</term>
<listitem>
<para><programlisting>
procedure WriteLn([ var F: Text; ] P1 [, P2, ...,Pn ] );
</programlisting></para>
</listitem>
</varlistentry>
</variablelist>
</sect1>  
</appendix>

<appendix>
<title>常见问题</title>
<para>
<productname>算法精灵</productname>使用过程中的常见问题的解答和说明。
</para>

<qandaset> 

<qandadiv>
<title>基本问题</title>
<qandaentry>
<question>
<para><productname>算法精灵</productname>是什么？</para>
</question>
<answer>
<para>
<productname>算法精灵</productname>是一个辅助教学的工具软件，可以帮助学生更好的掌握算法的实现原理和了解算法的实现过程。
</para>
</answer>
</qandaentry>
</qandadiv>

</qandaset>

</appendix>

</book>
