%{
  #include <stdio.h>
  #include "algorithm-elf.h"  /* Generated by bison. */
%}

%option 8bit reentrant stack noyywrap
%option bison-bridge bison-locations
%option debug
%option case-insensitive

%x comment

CHAR          \'[^\']\'
STRING        \'[^\']*\'
NAME          [a-zA-Z][_a-z0-9]*
INTEGER       [0-9]+
NUMBER        [0-9]+\.[0-9]+

%%

%{
  /* yy_flex_debug = 1; */
%}

"{"                       { yy_push_state( comment, yyscanner); }
<comment>"}"              { yy_pop_state( yyscanner ); }
<comment>\n               { yylloc->first_line ++; }
<comment>[^}\n]*          { /* do nothing */ }

":="            { *yylval = (YYSTYPE)strdup(yytext);
                  return IS;
                }
">="            { *yylval = (YYSTYPE)strdup(yytext);
                  return GE;
                }
"<="            { *yylval = (YYSTYPE)strdup(yytext);
                  return LE;
                }
"<>"            { *yylval = (YYSTYPE)strdup(yytext);
                  return NE;
                }
":"             { *yylval = (YYSTYPE)strdup(yytext);
                  return COLON;
                }
"-"             { *yylval = (YYSTYPE)strdup(yytext);
                  return MINUS;
                }
"+"             { *yylval = (YYSTYPE)strdup(yytext);
                  return ADD;
                }
"*"             { *yylval = (YYSTYPE)strdup(yytext);
                  return MUL;
                }
"/"             { *yylval = (YYSTYPE)strdup(yytext);
                  return DIV;
                }
">"             { *yylval = (YYSTYPE)strdup(yytext);
                  return GT;
                }
"<"             { *yylval = (YYSTYPE)strdup(yytext);
                  return LT;
                }
";"             { *yylval = (YYSTYPE)strdup(yytext);
                  return SEMICOLON;
                }
"="             { *yylval = (YYSTYPE)strdup(yytext);
                  return EQ;
                }
","             { *yylval = (YYSTYPE)strdup(yytext);
                  return COMMA;
                }
".."            { *yylval = (YYSTYPE)strdup(yytext);
                  return DDOT;
                }
"."             { *yylval = (YYSTYPE)strdup(yytext);
                  return DOT;
                }
"("             { *yylval = (YYSTYPE)strdup(yytext);
                  return LP;
                }
")"             { *yylval = (YYSTYPE)strdup(yytext);
                  return RP;
                }
"["             { *yylval = (YYSTYPE)strdup(yytext);
                  return LSP;
                }
"]"             { *yylval = (YYSTYPE)strdup(yytext);
                  return RSP;
                }
"^"             { *yylval = (YYSTYPE)strdup(yytext);
                  return INDICATOR;
                }
"@"             { *yylval = (YYSTYPE)strdup(yytext);
                  return AT;
                }

{CHAR}                    { *yylval = (YYSTYPE)strdup(yytext);
                            return TOK_CHAR;
                          }
{INTEGER}                 { *yylval = (YYSTYPE)strdup(yytext);
                            return TOK_INTEGER;
                          }

{NUMBER}                  { *yylval = (YYSTYPE)strdup(yytext);
                            return TOK_NUMBER;
                          }

{STRING}                  { *yylval = (YYSTYPE)strdup(yytext);
                            return TOK_STRING;
                          }

{NAME}                    { *yylval = (YYSTYPE)strdup(yytext);
                            char *p = (char*)*yylval;
                            while (*p){
                              *p = tolower(*p);
                              p ++;
                            }

                            p = (char*)*yylval;
                            if (strcmp(p, "true") == 0)
                              return TRUE;
                            else if (strcmp(p, "false") == 0)
                              return FALSE;
                            else if (strcmp(p, "and") == 0)
                              return AND;
                            else if (strcmp(p, "array") == 0)
                              return ARRAY;
                            else if (strcmp(p, "begin") == 0)
                              return TOK_BEGIN;
                            else if (strcmp(p, "const") == 0)
                              return CONST;
                            else if (strcmp(p, "else") == 0)
                              return ELSE;
                            else if (strcmp(p, "end") == 0)
                              return TOK_END;
                            else if (strcmp(p, "program") == 0)
                              return PROGRAM;
                            else if (strcmp(p, "for") == 0)
                              return FOR;
                            else if (strcmp(p, "function") == 0)
                              return FUNCTION;
                            else if (strcmp(p, "if") == 0)
                              return IF;
                            else if (strcmp(p, "in") == 0)
                              return IN;
                            else if (strcmp(p, "case") == 0)
                              return CASE;
                            else if (strcmp(p, "do") == 0)
                              return DO;
                            else if (strcmp(p, "downto") == 0)
                              return DOWNTO;
                            else if (strcmp(p, "not") == 0)
                              return NOT;
                            else if (strcmp(p, "of") == 0)
                              return OF;
                            else if (strcmp(p, "or") == 0)
                              return OR;
                            else if (strcmp(p, "procedure") == 0)
                              return PROCEDURE;
                            else if (strcmp(p, "record") == 0)
                              return RECORD;
                            else if (strcmp(p, "repeat") == 0)
                              return REPEAT;
                            else if (strcmp(p, "set") == 0)
                              return SET;
                            else if (strcmp(p, "then") == 0)
                              return THEN;
                            else if (strcmp(p, "to") == 0)
                              return TO;
                            else if (strcmp(p, "type") == 0)
                              return TYPE;
                            else if (strcmp(p, "while") == 0)
                              return WHILE;
                            else if (strcmp(p, "until") == 0)
                              return UNTIL;
                            else if (strcmp(p, "var") == 0)
                              return VAR;
                            else
                              return TOK_NAME;
                          }

<*>[[:blank:]]+           { /* do nothing */ }


<*><<EOF>>                { yypop_buffer_state(yyscanner);
                            if ( !YY_CURRENT_BUFFER ) {
                               yyterminate();
                               }
                          }
<*>\n                     { yylloc->first_line ++; }
<*>.                      { /* ignore all the others */ }

%%

#ifdef FLEX
int
main(int argc, char * argv[])
#else
int
fmain(int argc, char * argv[])
#endif
{
  yyscan_t scanner;
  YYSTYPE lvalp;
  YYLTYPE llocp;
  int token_id = 0;
  FILE * infile;

  ++argv, --argc;  /* skip over program name */
  /*
  if (argc > 0) {
    fprintf(stderr, "Open file %s...\n", argv[0]);
    infile = fopen(argv[0], "r");
    if (infile == NULL) {
      fprintf(stderr, "Error when open file '%s'\n", argv[ 0 ]);
      return -1;
    }
  }
  else
      infile = stdin;
  */

  infile = fopen("hanoi.pas", "r");
  if (infile == NULL)
    infile = stdin;

  fprintf(stdout, "Parsing...\n\n");

  yylex_init(&scanner);
  yyset_in(infile, scanner);
  while (token_id = yylex(&lvalp, &llocp, scanner)) {
    fprintf(stdout,
            "Token is %d(%s)\n",
            token_id,
            yyget_text(scanner)
            );
    /* fprintf(stderr, "Strdup(Token) is %s\n", lvalp); */
  }
  yylex_destroy(scanner);

  fprintf(stdout, "\nParse end.\n");
  fclose(infile);
  return 0;
}
