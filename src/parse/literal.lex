%{
  #include <stdio.h>
  #include "algorithm_fairy.tab.h"  /* Generated by bison. */

  extern int getTokenID(char * );
%}

%option 8bit reentrant stack noyywrap yylineno
%option bison-bridge bison-locations

%x inline_comment comment xtype

STRING        ["].*["]
NAME          [a-zA-Z][_a-z0-9]*
TYPENAME      [a-zA-Z][_a-z0-9]*
INTEGER       [0-9]+
NUMBER        [0-9]+\.[0-9]*


%%

"{"                       { yy_push_state( comment, yyscanner); }

"//"                      { yy_push_state(inline_comment, yyscanner); }

<comment>"}"              { yy_pop_state( yyscanner ); }

<inline_comment>"\n"      { yy_pop_state( yyscanner ); }

<comment>[^}]*            { /* do nothing */ }

<inline_comment>.*        { /* do nothing */ }

True                      { *yylval = (YYSTYPE)strdup( yyget_text( yyscanner ) );
                            return TRUE;
                          }

False                     { *yylval = (YYSTYPE)strdup( yyget_text( yyscanner ) );
                            return FALSE;
                          }

"entry" | "procedure" | "function" |
"const" | "var" | "type" | "record" | "array" | "of" |
"for" | "while" | "if" | "do" |
"begin" | "end" |
"and" | "or" | "not" |
":=" | ">=" | "<=" |
"<>"                      { 
                            *yylval = (YYSTYPE)strdup( yyget_text( yyscanner ) );
                            return getTokenID(yyget_text( yyscanner ));
                           }

[-+*/><;=,.^()]           { *yylval = (YYSTYPE)strdup( yyget_text( yyscanner ) );
                            return yyget_text( yyscanner )[0];
                           }

:                         {  yy_push_state( xtype, yyscanner );
                             *yylval = (YYSTYPE)strdup( yyget_text( yyscanner ) );
                             return yyget_text( yyscanner )[0];
			   }

integer |
double |
char |
boolean |
string                    { yy_pop_state( yyscanner );
                            *yylval = (YYSTYPE)strdup( yyget_text( yyscanner ) );
                            return getTokenID(yyget_text( yyscanner));
                          }

<xtype>{TYPENAME}         {
                           *yylval = (YYSTYPE)strdup( yyget_text( yyscanner ) );
                           yy_pop_state( yyscanner );
                           return TYPENAME;
			  }

{INTEGER}                 { *yylval = (YYSTYPE)strdup( yyget_text( yyscanner ) );
                            return INTEGER;
                          }

{NUMBER}                  { *yylval = (YYSTYPE)strdup( yyget_text( yyscanner ) );
                            return NUMBER;
                          }

{STRING}                  { *yylval = (YYSTYPE)strdup( yyget_text( yyscanner ) );
                            return STRING;
                          }

{NAME}                    { *yylval = (YYSTYPE)strdup( yyget_text( yyscanner ) );
                            return NAME;
                          }

<*>[[:blank:]]+           { /* do nothing */ }


<*><<EOF>>                { yypop_buffer_state(yyscanner);
                            if ( !YY_CURRENT_BUFFER ) {
			       yyterminate();
			       }
			  }

<*>.                      { /* ignore all the others */ }

%%

int 
flmain ( int argc, char * argv[] )
{
    yyscan_t scanner;
    YYSTYPE lvalp;
    YYLTYPE llocp;
    int token_id = 0;
    FILE * infile;

    ++argv, --argc;  /* skip over program name */
    /*
    if ( argc > 0 ) {
      fprintf( stderr, "Open file %s...\n", argv[0] );
      infile = fopen( argv[0], "r" );
      if ( infile == NULL ) {
        fprintf ( stderr, "Error when open file '%s'\n", argv[ 0 ] );
        return -1;
      }
    }
    else
        infile = stdin;
    */

    infile = fopen( "tokens", "r" );
    if ( infile == NULL )
      infile = stdin;

    fprintf ( stdout, "Parsing...\n\n" );

    yylex_init ( &scanner );
    yyset_in ( infile, scanner );    
    while( token_id = yylex ( &lvalp, &llocp, scanner ) ) {
      fprintf (
	       stdout,
	       "Token is %d(%s)\n",
	       token_id,
	       yyget_text( scanner )
	       );
      /* fprintf ( stderr, "Strdup(Token) is %s\n", lvalp); */
    }    
    yylex_destroy ( scanner );

    fprintf ( stdout, "\nParse end.\n" );
    fclose ( infile );
    return 0;
}
